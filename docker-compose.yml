services:
  postgres:
    build:
      context: ./postgreSQL
      dockerfile: postgresDB.Dockerfile
      args:
        DB_USER: ${POSTGRES_USER}
        DB_PASSWORD: ${POSTGRES_PASSWORD}
        DB_NAME: ${POSTGRES_DB}
    container_name: postgres_db_dev
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT_EX}:${POSTGRES_PORT_NATIVE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network_dev

  pgadmin:
    build:
      context: ./postgreSQL
      dockerfile: pgAdmin.Dockerfile
      args:
        PGADMIN_EMAIL: ${PGADMIN_EMAIL}
        PGADMIN_PASSWORD: ${PGADMIN_PASSWORD}
    container_name: pgadmin_ui_dev
    restart: unless-stopped
    ports:
      - ${PGADMIN_PORT_EX}:${PGADMIN_PORT_NATIVE}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network_dev

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.Dockerfile
      args:
        PORT_REFERENCE: ${PORT_REFERENCE}
        HOST_REFERENCE: ${HOST_REFERENCE}
    container_name: vue_frontend_dev
    restart: unless-stopped
    ports:
      - ${FRONTEND_PORT_EX}:${FRONTEND_PORT_NATIVE}
    volumes:
      - ./frontend:/app
      - node_modules_cache:/app/node_modules  # This prevents host node_modules from overriding container's
    depends_on:
      - backend-server-caddy
    networks:
      - app-network_dev

  php:
    build:
      context: ./backend
      dockerfile: php-manager.Dockerfile
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    container_name: php_manager_dev
    restart: unless-stopped
    volumes:
      - ./backend/php:/var/www/php
    depends_on:
      - postgres
    networks:
      - app-network_dev

  backend-server-caddy:
    build:
      context: ./backend
      dockerfile: caddy-server.Dockerfile
    container_name: backend_server_caddy_dev
    restart: unless-stopped
    volumes:
      - ./backend/php:/var/www/php
    ports:
      - ${BACKEND_CADDY_PORT_EX}:${BACKEND_CADDY_PORT_NATIVE}
    depends_on:
      - php
    networks:
      - app-network_dev

  cdn:
    build:
      context: ./CDN
      dockerfile: caddy-cdn.Dockerfile
    container_name: caddy-cdn_dev
    ports:
      - ${CDN_PORT_EX}:${CDN_PORT_NATIVE}
    volumes:
      - ./CDN/assets:/srv/assets:ro  # Read-only access to assets
    networks:
      - app-network_dev
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:
  node_modules_cache:

networks:
  app-network_dev:
    driver: bridge
